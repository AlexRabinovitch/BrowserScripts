// ==UserScript==
// @name         oper.ru filter
// @namespace    https://tampermonkey.net/
// @version      0.1
// @description  Removes unwanted items
// @author       Alex Rabinovitch
// @match        https://oper.ru/*
// @require      http://code.jquery.com/jquery-latest.js
// @require      https://gist.github.com/raw/2625891/waitForKeyElements.js
// @run-at       document-start
// @grant        none
// ==/UserScript==

var _filters = new Object();

(function() {
    'use strict';

    try
    {
        fillFilters();
    }
    catch(e)
    {
        console.log('oper.ru filter error: ' + e.message);
    }
})();

new MutationObserver(function(mutations)
{
    console.log('Mutations detected: ' + mutations.length);

    for (var i = 0; i < mutations.length; i++)
    {
        var mutationAddedNodes = mutations[i].addedNodes;
        for (var j = 0; j < mutationAddedNodes.length; j++)
        {
            var node = mutationAddedNodes[j];
            if (node.tagName && node.tagName.toUpperCase() == "DT")
            {
                console.log('Node found');
                processNode(node);
            }
        }
    }

}).observe(document, {childList: true, subtree: true});

document.onreadystatechange = () =>
{
    if (document.readyState === 'complete')
    {
        console.log('Document ready');

        var nodes = document.querySelectorAll('dt');

        //console.log('Nodes length: ' + nodes.length);

        for(var i = 0; i < nodes.length; i++)
        {
            processNode(nodes[i]);
        }
    }
};

function processNode(headerNode)
{
    var isAllowed = checkHeader(headerNode);

    if(isAllowed == "true")
    {
        return;
    }
    else
    {
        var bodyNode;
        console.log('Going to get body...');
        bodyNode = getBody(headerNode);

        if(bodyNode != null)
        {
            if(isAllowed == "false")
            {
                console.log('Going to remove body...');
                bodyNode.remove();
                headerNode.remove();
            }
            else
            {
                console.log('Going to check body...');
                var res = checkBody(bodyNode);
                console.log('res: ' + res);
                if(!res)
                {
                    bodyNode.remove();
                    headerNode.remove();
                }
            }
        }
    }
}

function getBody(headerNode)
{
    var bodyNode = headerNode.nextSibling;
    console.log('Next sibling: ' + bodyNode.nodeName);
    if (bodyNode.nodeName && bodyNode.nodeName.toUpperCase() == "#TEXT")
    {
        bodyNode = bodyNode.nextSibling;
    }
    if (bodyNode.nodeName && bodyNode.nodeName.toUpperCase() == "DD")
    {
        console.log('Body node found');

        return bodyNode;
    }
    console.log('Body node not found');
    return null;
}

function checkHeader(node)
{
    var titles = node.querySelectorAll('a');
    var title = '';
    if(titles && titles.length > 0)
    {
        title = titles[0].innerText;
        console.log('Title found: ' + title);

        var regex = new RegExp(_filters.AlwaysBlock.Headers.join("|"), 'i');
        console.log('regex: ' + regex);

        if(regex.test(title))
        {
            console.log('Header to block found: ' + title);
            return "false";
        }

        regex = new RegExp(_filters.AlwaysAllow.Headers.join("|"), 'i');
        if(regex.test(title))
        {
            return "true";
        }
    }
    return "unknown";
}

function checkBody(node)
{
    try
    {
        var jroot = $(node);
        //console.log('jroot: ' + jroot.html());
        var items = jroot.find('a.comments');

        console.log('Items found: ' + items.length);

        var bodyText = node.innerText;
        //console.log('Body text: ' + bodyText);

        var regex = new RegExp(_filters.AlwaysBlock.Keywords.join("|"), 'im');

        if(regex.test(bodyText))
        {
            //console.log('Content to block found: ' + bodyText);
            return false;
        }

        regex = new RegExp(_filters.AlwaysAllow.Keywords.join("|"), 'im');
        if(regex.test(bodyText))
        {
            return true;
        }

        for(var i = 0; i < items.length; i++)
        {
            var item = items[i];
            var itemText = $(item).text();
            console.log('itemText: ' + itemText);

            if(checkItemText(itemText, _filters.AlwaysBlock.Users))
            {
                return false;
            }
            if(checkItemText(itemText, _filters.AlwaysBlock.Topics))
            {
                return false;
            }
            if(checkItemText(itemText, _filters.AlwaysAllow.Users))
            {
                return true;
            }
        }
        items = jroot.find('a');

        console.log('A items found: ' + items.length);

        /*for(i = 0; i < items.length; i++)
        {
            item = items[i];
            itemText = $(item).text();
            console.log('itemText: ' + itemText);

            if(regex.test(itemText))
            {
                console.log('Content to block found: ' + itemText);
                return false;
            }
        }*/
    }
    catch(e)
    {
        console.log('Error: ' + e.message);
    }

    return true;
}

function checkItemText(itemText, filterValues)
{
    for(var i = 0; i < filterValues.length; i++)
    {
        if(itemText == filterValues[i])
        {
            return true;
        }
    }
}

function fillFilters()
{
    console.log('Filling filters...');

    var alwaysAllow = new Object();
    alwaysAllow.Headers = ['Егор.*?Яковлев', '^(?!.*?Breaking Bad)(?!.*?Реми Майснер).*?Клим.*?Жуков', 'Владимир.*?Неволин', 'Синий Фил', 'Изолента'];
    alwaysAllow.Users = ['egoryakovlev', 'Zhukoff'];
    alwaysAllow.Keywords = ['Шекспир плачет'];
    _filters.AlwaysAllow = alwaysAllow;

    var alwaysBlock = new Object();
    alwaysBlock.Headers = ['Надан.*?Фридрихсон', 'Вероник.*?Крашенинников', 'Во все тяжкие', 'Breaking Bad', 'Позывной ', 'Помощь детям .*Донецка', 'Реми Майснер', 'Михаил.*?Фадеев', 'Зулейха', 'Эффект Доплера', 'Арктик', 'Солженицын', 'в переводе Гоблина', 'Вечерний Излучатель', 'Победитель конкурса', 'Приз получает', 'Ремня получает', 'арктич', 'vip\.oper\.ru', 'Слово пацана', 'Внеклассовое чтение', 'ДНР', 'Goblin news', 'Sputnik', 'Новороссия', 'Штрафбат', 'The Last of Us'];
    alwaysBlock.Users = ['redacteur', 'Redakteur', 'Onepamop', 'реклама'];
    alwaysBlock.Topics = ['Это ПЕАР', 'Железки', 'СВО', 'Политика', 'Победа!'];
    alwaysBlock.Keywords = ['Арктик'];//'Уралов', '^Скидка', '^Распродажа', 'vip\.oper\.ru'
    _filters.AlwaysBlock = alwaysBlock;

    console.log('Done filling filters.');
}
